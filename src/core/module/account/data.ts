import { now, sort_record } from '../../util/index.js'

import {
  AccountData,
  AccountRequest,
  SignerAPI
} from '@/core/types/index.js'

import {
  gen_session_token
} from '@/core/lib/session.js'

import * as util from './util.js'

/**
 * Create an account data object.
 *
 * NOTE: The return address is used to index the signature session
 * generated by the counter-party. The resulting deposit address
 * is deterministic, which provides idempotency to the request.
 *
 * The deposit address should be checked by the counter-party for
 * prior use on the blockchain, and if used, reject the request.
 */
export function create_account (
  request : AccountRequest,
  signer  : SignerAPI,
  created_at = now()
) : AccountData {
  // Unpack the request object.
  const { deposit_pk, locktime, network, return_addr } = request
  // Get signing agent for account.
  const agent        = util.get_account_agent(request, signer)
  // Generate a session token.
  const agent_tkn    = gen_session_token(agent, created_at).tkn
  // Create a context object for the account.
  const acct_ctx     = util.create_account_ctx(deposit_pk, locktime, network, return_addr, agent_tkn)
  // Compute the deposit address from the account context.
  const deposit_addr = acct_ctx.deposit_addr
  // Compute the hash for the account request.
  const account_hash = util.get_account_hash(request)
  // Set the server pubkey.
  const agent_pk     = signer.pubkey
  // Compute the id for the account data.
  const account_id   = util.get_account_id(deposit_addr, account_hash, agent_pk, created_at, agent_tkn)
  // Sign the account identifier.
  const created_sig    = signer.sign(account_id)
  // Return the complete account data object.
  return sort_record({ ...request,  account_id, account_hash, created_sig, created_at, deposit_addr, agent_pk, agent_tkn })
}
